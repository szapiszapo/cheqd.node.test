
version: '3.9'

secrets:
  TRAEFIK_USERNAME:
    file: "/opt/${PROJECT_NAME}/secrets/TRAEFIK_USERNAME.secret"
  TRAEFIK_HASHED_PASSWORD:
    file: "/opt/${PROJECT_NAME}/secrets/TRAEFIK_HASHED_PASSWORD.secret"
  TRAEFIK_DOMAIN:
    file: "/opt/${PROJECT_NAME}/secrets/TRAEFIK_DOMAIN.secret"
  LE_AUTH_EMAIL:
    file: "/opt/${PROJECT_NAME}/secrets/LE_AUTH_EMAIL.secret"

services:

  traefik:
    image: traefik:latest
    secrets:
      - TRAEFIK_USERNAME
      - TRAEFIK_HASHED_PASSWORD
      - TRAEFIK_DOMAIN
      - LE_AUTH_EMAIL
    environment:
      - "PROJECT_NAME=${PROJECT_NAME}"
      - "TRAEFIK_USERNAME_FILE=/run/secrets/TRAEFIK_USERNAME"
      - "TRAEFIK_HASHED_PASSWORD_FILE=/run/secrets/TRAEFIK_HASHED_PASSWORD"
      - "TRAEFIK_DOMAIN_FILE=/run/secrets/TRAEFIK_DOMAIN"
      - "LE_AUTH_EMAIL_FILE=/run/secrets/LE_AUTH_EMAIL"
    # entrypoint: /traefik-entrypoint.sh
    # entrypoint: sh -c "apk add --no-cache bash ; export CHEQD_TRAEFIK_USERNAME=$$(cat /run/secrets/TRAEFIK_USERNAME) ; export CHEQD_TRAEFIK_HASHED_PASSWORD=$$(cat /run/secrets/TRAEFIK_HASHED_PASSWORD) ; export CHEQD_TRAEFIK_DOMAIN=$$(cat /run/secrets/TRAEFIK_DOMAIN) ; export CHEQD_LE_AUTH_EMAIL=$$(cat /run/secrets/LE_AUTH_EMAIL) ; source /entrypoint.sh"
    # entrypoint: [ '/bin/sh', '-c', 'apk add --no-cache bash ; chmod +x /traefik-entrypoint.sh ; . /traefik-entrypoint.sh ; . /entrypoint.sh' ]
    # entrypoint: ["/traefik-entrypoint.sh"]
    # command: sh -c "apk add --no-cache bash ; chmod +x /traefik-entrypoint.sh ; source /traefik-entrypoint.sh ; " 
      # - chmod +x /usr/local/bin/traefik-entrypoint.sh
      # - /usr/local/bin/traefik-entrypoint.sh
    # command: sh -c "apk add --no-cache bash"
    ports:
      # Listen on port 80, default for HTTP, necessary to redirect to HTTPS
      - 80:80
      # Listen on port 443, default for HTTPS
      - 443:443
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          # Make the traefik service run only on the node with this label
          # as the node with it has the volume for the certificates
          - node.labels.traefik-public.traefik-public-certificates == true
      labels:
        # Enable Traefik for this service, to make it available in the public network
        - traefik.enable=true
        # Use the traefik-public network (declared below)
        - traefik.docker.network=traefik-public
        # Use the custom label "traefik.constraint-label=traefik-public"
        # This public Traefik will only use services with this label
        # That way you can add other internal Traefik instances per stack if needed
        - traefik.constraint-label=traefik-public
        # admin-auth middleware with HTTP Basic auth
        - traefik.http.middlewares.admin-auth.basicauth.users=${TRAEFIK_USERNAME_FILE}:${TRAEFIK_HASHED_PASSWORD_FILE}
        # - traefik.http.middlewares.admin-auth.basicauth.users=$$(cat /run/secrets/TRAEFIK_USERNAME):$$(cat /run/secrets/TRAEFIK_PASSWORD)
        # https-redirect middleware to redirect HTTP to HTTPS
        # It can be re-used by other stacks in other Docker Compose files
        - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
        # traefik-http set up only to use the middleware to redirect to https
        - traefik.http.routers.traefik-public-http.rule=Host(`${TRAEFIK_DOMAIN_FILE}`)
        # - traefik.http.routers.traefik-public-http.rule=Host(`$$(cat /run/secrets/TRAEFIK_DOMAIN)`)
        - traefik.http.routers.traefik-public-http.entrypoints=http
        - traefik.http.routers.traefik-public-http.middlewares=https-redirect
        # traefik-https the actual router using HTTPS
        - traefik.http.routers.traefik-public-https.rule=Host(`${TRAEFIK_DOMAIN_FILE}`)
        # - traefik.http.routers.traefik-public-https.rule=Host(`$$(cat /run/secrets/TRAEFIK_DOMAIN)`)
        - traefik.http.routers.traefik-public-https.entrypoints=https
        - traefik.http.routers.traefik-public-https.tls=true
        # Use the special Traefik service api@internal with the web UI/Dashboard
        - traefik.http.routers.traefik-public-https.service=api@internal
        # Use the "le" (Let's Encrypt) resolver created below
        - traefik.http.routers.traefik-public-https.tls.certresolver=le
        # Enable HTTP Basic auth, using the middleware created above
        - traefik.http.routers.traefik-public-https.middlewares=admin-auth
        # Define the port inside of the Docker service to use
        - traefik.http.services.traefik-public.loadbalancer.server.port=8080
    volumes:
      # Add Docker as a mounted volume, so that Traefik can read the labels of other services
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Mount the volume to store the certificates
      - traefik-public-certificates:/certificates
      # Mount the volume to entrypoint
      # - /opt/cheqd_node/traefik-entrypoint.sh:/traefik-entrypoint.sh
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Add a constraint to only use services with the label "traefik.constraint-label=traefik-public"
      - --providers.docker.constraints=Label(`traefik.constraint-label`, `traefik-public`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Enable Docker Swarm mode
      - --providers.docker.swarmmode
      # Create an entrypoint "http" listening on address 80
      - --entrypoints.http.address=:80
      # Create an entrypoint "https" listening on address 80
      - --entrypoints.https.address=:443
      # Create the certificate resolver "le" for Let's Encrypt
      - --certificatesresolvers.le.acme.email=${LE_AUTH_EMAIL_FILE}
      # - --certificatesresolvers.le.acme.email=$$(cat /run/secrets/LE_AUTH_EMAIL)
      # Store the Let's Encrypt certificates in the mounted volume
      - --certificatesresolvers.le.acme.storage=/certificates/acme.json
      # Use the TLS Challenge for Let's Encrypt
      - --certificatesresolvers.le.acme.tlschallenge=true
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
    networks:
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with HTTPS
      - traefik-public

volumes:
  # Create a volume to store the certificates, there is a constraint to make sure
  # Traefik is always deployed to the same Docker node with the same volume containing
  # the HTTPS certificates
  traefik-public-certificates:

networks:
  # Use the previously created public network "traefik-public", shared with other
  # services that need to be publicly available via this Traefik
  traefik-public:
    external: true

